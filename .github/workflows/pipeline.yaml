name: CI pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write

env:
  NODE_VERSION: "24"
  BUILD_ARTIFACT_NAME: "ta-analyzer-build-output"
  BUILD_ARTIFACT_FOLDER: "pkg"

jobs:
  # Check linting and formatting
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable # "stable" sets up the latest stable Rust version

      - name: Cache Cargo registry
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Linting with Cargo check
        run: RUSTFLAGS="-D warnings" cargo check

      - name: Linting with Clippy
        run: cargo clippy -- -D warnings

  # Build the project
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable # "stable" sets up the latest stable Rust version

      - name: Cache Cargo registry
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache wasm-pack
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          path: ~/.cargo/bin/wasm-pack
          key: ${{ runner.os }}-wasm-pack-${{ hashFiles('**/Cargo.lock') }}

      - name: Install wasm-pack
        run: |
          if [[ ! -f ~/.cargo/bin/wasm-pack ]]; then
            cargo install wasm-pack
          else
            echo "wasm-pack is already installed"
          fi

      - name: Build the project with wasm-pack
        run: wasm-pack build --target bundler

      - name: Upload build artifact
        if: github.ref == 'refs/heads/release' # build artifact is only needed for publish action
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}
          if-no-files-found: "error"
          retention-days: 1

  # Run tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable # "stable" sets up the latest stable Rust version

      - name: Cache Cargo registry
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run unit tests
        run: cargo test

  # Deploy to npmjs.com
  publish:
    needs:
      - static-analysis
      - build
      - test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    concurrency:
      group: publish_npm
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Set up Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 #v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Download build artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}

      - name: List downloaded artifact files
        run: |
          echo "Contents of ${{ env.BUILD_ARTIFACT_FOLDER }}:"
          ls -R "${{ env.BUILD_ARTIFACT_FOLDER }}"

      - name: Publish to npm with provenance attestation
        run: |
          cd "${{ env.BUILD_ARTIFACT_FOLDER }}"
          npm config set provenance true
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}